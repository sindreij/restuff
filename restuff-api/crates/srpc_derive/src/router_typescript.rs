use proc_macro2::TokenStream;
use quote::quote;
use syn::ImplItem;

pub(crate) fn generate_router_typescript(parsed_item: &syn::ItemImpl) -> TokenStream {
    let calls = parsed_item
        .items
        .iter()
        .filter_map(|item| {
            if let ImplItem::Fn(item) = item {
                if let syn::Visibility::Public(_) = item.vis {
                    Some(item)
                } else {
                    None
                }
            } else {
                None
            }
        })
        .map(|item| {
            let name = &item.sig.ident.to_string();

            quote! {
                writeln!(res, "{name}: async () => rpcCall({name}),", name=stringify!(#name)).unwrap();
            }
        });

    quote! {
        use std::fmt::Write;

        let mut res = String::new();


        writeln!(res, "// This file is generated by srpc-derive").unwrap();
        writeln!(res, "").unwrap();
        writeln!(res, "import {{ rpcCall }} from './rpcClient';").unwrap();
        writeln!(res, "").unwrap();

        writeln!(res, "export const client = {{").unwrap();

        #(#calls)*

        writeln!(res, "}};\n").unwrap();

        res
    }
}
